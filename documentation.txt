## Документація коду

### Опис програми
Програма реалізує запис масиву записів у файл. Кожен запис містить індекс та дані. Дані записуються у файл у текстовому режимі з певним форматуванням, яке включає індекс, заповнений нулями до фіксованої довжини, і дані, заповнені пробілами до фіксованої довжини.

### Файли та бібліотеки
- `#include <iostream>`: Бібліотека для роботи зі стандартним введенням/виведенням.
- `#include <fstream>`: Бібліотека для роботи з файлами.
- `#include <vector>`: Бібліотека для використання векторів (динамічних масивів).
- `#include <string>`: Бібліотека для роботи з рядками (std::string).
- `#include <sstream>`: Бібліотека для роботи з потоками рядків (std::ostringstream).
- `#include <iomanip>`: Бібліотека для маніпуляцій з форматуванням введення/виведення.
- `#include <cstring>`: Бібліотека для роботи з функціями C-string, такими як `memset` та `strncpy`.

### Константи
- `const int RECORD_SIZE = 100;`
  - Фіксована довжина запису в символах, включаючи індекс і дані.
- `const int INDEX_SIZE = 4;`
  - Довжина поля індексу в символах.
- `const int DATA_SIZE = RECORD_SIZE - INDEX_SIZE - 1;`
  - Довжина поля даних в символах, зменшена на 1 для пробілу між індексом та даними.

### Структура `Record`
Структура `Record` представляє окремий запис, що складається з індексу та даних.

#### Поля
- `int index;`
  - Індекс запису, типу `int`.
- `char data[DATA_SIZE + 1];`
  - Дані запису, типу `char` масив. Довжина масиву - `DATA_SIZE + 1`, де +1 для нульового термінатора.

#### Конструктори
- `Record(int idx, const std::string& str);`
  - Ініціалізує `index` переданим значенням `idx`.
  - Ініціалізує поле `data` нулями за допомогою `memset`.
  - Копіює переданий рядок `str` у поле `data` за допомогою `strncpy`, обмежуючи копіювання до `DATA_SIZE` символів.

- `Record();`
  - Ініціалізує `index` значенням 0.
  - Ініціалізує поле `data` нулями за допомогою `memset`.

### Функція `writeRecordsToFile`
Записує масив записів у файл у текстовому режимі.

#### Аргументи
- `const std::string& filename`
  - Ім'я файлу для запису.
- `const std::vector<Record>& records`
  - Масив записів для запису у файл.
- `int N`
  - Кількість записів, що мають бути у файлі. Якщо індекс запису виходить за межі `N`, такий запис ігнорується.

#### Логіка
1. Відкриває файл з ім'ям `filename` у текстовому режимі.
2. Перевіряє, чи файл успішно відкрився. Якщо ні, виводить повідомлення про помилку та виходить з функції.
3. Ініціалізує масив `fullRecords` розміром `N` порожніми записами.
4. Заповнює масив `fullRecords` даними з вхідного масиву `records`, розміщуючи їх на відповідних позиціях індексу.
5. Записує кожен запис з масиву `fullRecords` у файл, форматуючи його за допомогою `ostringstream`, заповнюючи індекс нулями, а дані пробілами.
6. Закриває файл.

### Функція `main`
Головна функція програми, яка відповідає за взаємодію з користувачем та виклик функції `writeRecordsToFile`.

#### Логіка
1. Зчитує кількість записів `N` від користувача.
2. Створює прикладний масив записів `records`.
3. Визначає ім'я файлу `filename`.
4. Викликає функцію `writeRecordsToFile`, передаючи їй ім'я файлу, масив записів та кількість записів.
5. Виводить повідомлення про успішний запис у файл.
6. Повертає 0, що означає успішне завершення програми.

### Приклад використання
1. Користувач запускає програму.
2. Програма запитує кількість записів `N`.
3. Користувач вводить значення `N`.
4. Програма записує визначений масив записів у файл `records.txt`.
5. Програма повідомляє про успішний запис у файл.
